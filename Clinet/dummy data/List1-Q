{
    "questions": [
      {
        "question": "What is the main task of the problem?",
        "options": {
          "1": "Find all unique characters in the DNA sequence.",
          "2": "Identify all 10-letter-long sequences that occur more than once.",
          "3": "Count the number of nucleotides in the sequence.",
          "4": "Sort the DNA sequence alphabetically."
        }
      },
      {
        "question": "What would be a brute force approach to solve this problem?",
        "options": {
          "1": "Check each 10-letter substring and compare it with every other substring.",
          "2": "Use a hash map to store counts of each 10-letter substring.",
          "3": "Sort the DNA sequence and find duplicates.",
          "4": "Use a sliding window to find all substrings."
        }
      },
      {
        "question": "Why is the brute force approach not efficient for this problem?",
        "options": {
          "1": "It requires sorting the entire sequence.",
          "2": "It involves comparing each substring with every other substring, leading to high time complexity.",
          "3": "It uses too much memory.",
          "4": "It does not find all substrings."
        }
      },
      {
        "question": "How can we improve upon the brute force solution?",
        "options": {
          "1": "Use a hash map to store and count occurrences of each 10-letter substring.",
          "2": "Sort the DNA sequence first.",
          "3": "Use a stack to track substrings.",
          "4": "Use recursion to find substrings."
        }
      },
      {
        "question": "What is the time complexity of the brute force approach?",
        "options": {
          "1": "O(n^2)",
          "2": "O(n)",
          "3": "O(nlog n)",
          "4": "O(1)"
        }
      },
      {
        "question": "What data structure can help optimize the solution?",
        "options": {
          "1": "Array",
          "2": "Hash Map",
          "3": "Linked List",
          "4": "Queue"
        }
      },
      {
        "question": "What is the time complexity of using a hash map to store and count substrings?",
        "options": {
          "1": "O(n)",
          "2": "O(n^2)",
          "3": "O(nlogn)",
          "4": "O(1)"
        }
      },
      {
        "question": "What is the space complexity of using a hash map for this problem?",
        "options": {
          "1": "O(n)",
          "2": "O(1)",
          "3": "O(n^2)",
          "4": "O(logn)"
        }
      },
      {
        "question": "Which algorithmic technique can be applied to efficiently find substrings?",
        "options": {
          "1": "Two pointers",
          "2": "Sliding window",
          "3": "Binary search",
          "4": "Depth-first search"
        }
      },
      {
        "question": "What is the optimal solution for this problem?",
        "options": {
          "1": "Use a sliding window and hash map to track and count 10-letter substrings.",
          "2": "Sort the DNA sequence and find duplicates.",
          "3": "Use a stack to track substrings.",
          "4": "Use recursion to find substrings."
        }
      }
    ],
    "optimal_code": "def findRepeatedDnaSequences(s):\n    seen, repeated = set(), set()\n    for i in range(len(s) - 9):\n        substring = s[i:i+10]\n        if substring in seen:\n            repeated.add(substring)\n        seen.add(substring)\n    return list(repeated)"
  }
    